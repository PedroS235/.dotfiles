#!/bin/bash

DISTRO=$(command lsb_release -i | awk -F':' '{print $2}' | xargs)

UPDATE_SYSTEM_PACKAGES=true
if [ "$1" == "--skip-update" ]; then
    UPDATE_SYSTEM_PACKAGES=false
fi

DOTFILES_DIR="$HOME/.dotfiles/"
SSH_DIR="$HOME/.ssh"
export XDG_CONFIG_HOME="$HOME/.config"

print_i(){
    echo -e "\033[32m[INFO] - \033[0m${1}"
}

print_w(){
    echo -e "\033[33m[WARN] - \033[0m${1}"
}

print_e(){
    echo -e "\033[31m[ERROR] - \033[0m${1}"
}

# Check which distro is in use to decide which package manager to use
if [[ $DISTRO == "Pop" || $DISTRO == "Ubuntu" || $DISTRO == "Debian" ]]; then
    PACKAGE_MANAGER="apt"
elif [[ $DISTRO -eq "Fedora" ]]; then
    PACKAGE_MANAGER="dnf"
else
    print_e "Linux Distrubution not recognized"
    exit 1
fi


apt_install(){
    sudo $PACKAGE_MANAGER install "$1" -y
}

if [[ "$(command -v nala)" && $PACKAGE_MANAGER == "apt" ]]; then
    PACKAGE_MANAGER="nala"
fi


if [ "$UPDATE_SYSTEM_PACKAGES" = true ]; then
    print_i "Updating System Packages"
    sudo "$PACKAGE_MANAGER" update && sudo "$PACKAGE_MANAGER" upgrade -y
    sudo "$PACKAGE_MANAGER" autoremove -y
fi

if ! [ -x "$(command -v git)" ]; then
    print_i "Git not installed, installing..."
    apt_install git
fi

if ! [ -x "$(command -v stow)" ]; then
    print_i "Stow not installed, installing..."
    apt_install stow
fi


if ! [ -x "$(command -v curl)" ]; then
    print_i "Curl not installed, installing..."
    apt_install curl
fi

if ! [ -x "$(command -v pip)" ]; then
    print_i "Pip not installed, installing..."
    apt_install python3-pip
    apt_install python3-venv
fi

if ! [ -x "$(command -v ansible)" ]; then
    print_i "Ansible not installed, installing..."
    pip3 install ansible
fi

if ! [ -x "$(command -v xclip)" ]; then
    print_i "Xclip not installed, installing..."
    apt_install xclip
fi

if ! [ -x "$(command -v nala)" ]; then
    print_i "Nala not installed, installing..."
    apt_install nala
fi

if ! [ "$(command -v lazygit)" ]; then
    print_i "Lazygit not installed, installing..."

    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    tar xf lazygit.tar.gz lazygit
    sudo install lazygit /usr/local/bin
    rm lazygit.tar.gz lazygit
fi

if ! [ -x "$(command -v fzf)" ]; then
    print_i "Fzf not installed, installing..."
    apt_install fzf
fi

if ! [ -x "$(command -v tmux)" ]; then
    print_i "Tmux not installed, installing..."
    apt_install tmux
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

if ! [ -x "$(command -v flameshot)" ]; then
    print_i "Flameshot not installed, installing..."
    apt_install flameshot
fi

if ! [ -x "$(command -v cargo)" ]; then
    print_i "Rust not installed, installing..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    source "$HOME/.cargo/env" || exit 1
fi

if ! [ -x "$(command -v bob)" ]; then
    print_i "Bob neovim not installed, installing..."
    cargo install bob-nvim

    bob install nightly
    bob use nightly
fi

if ! [ -x "$(command -v neofetch)" ]; then
    print_i "Neofetch not installed, installing..."
    apt_install neofetch
fi

if ! [ -x "$(command -v zoxide)" ]; then
    print_i "Zoxide not installed, installing..."
    cargo install zoxide --locked
fi

if ! [ -x "$(command -v rg)" ]; then
    print_i "Ripgrep not installed, installing..."
    apt_install ripgrep
fi

if ! [ -x "$(command -v lolcat)" ]; then
    print_i "Lolcat not installed, installing..."
    apt_install lolcat
fi

if ! [ -x "$(command -v figlet)" ]; then
    print_i "Figlet not installed, installing..."
    apt_install figlet
fi

if ! [ -x "$(command -v node)" ]; then
    print_i "Nodejs not installed, installing..."
    # installs NVM (Node Version Manager)
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    nvm install 20
fi

if ! [ -x "$(command -v starship)" ]; then
    print_i "Starship not installed, installing..."
    cargo install starship --locked
fi

if ! [ -d "$HOME/.fonts/GeistMono/" ]; then
    print_i "Font GeistMono not installed, installing..."
    mkdir -p "$HOME/.fonts/GeistMono/"
    wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/GeistMono.zip -P "$HOME/.fonts/GeistMono/"
    cd "$HOME/.fonts/GeistMono/" || exit 1
    unzip GeistMono.zip
    rm GeistMono.zip
fi

if ! [ -x "$(command -v alacritty)" ]; then
    print_i "Alacritty not installed, installing..."
    sudo $PACKAGE_MANAGER install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3 -y
    git clone https://github.com/alacritty/alacritty.git
    cd alacritty || exit 1
    cargo build --release

    if ! [ -x "$(command -v infocmp alacritty)" ]; then
        sudo tic -xe alacritty,alacritty-direct extra/alacritty.info
    fi

    sudo cp target/release/alacritty /usr/local/bin # or anywhere else in $PATH
    sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
    sudo desktop-file-install extra/linux/Alacritty.desktop
    sudo update-desktop-database

    cd .. && rm -rf alacritty
fi

if ! [ -x "$(command -v megasync)" ]; then
    print_i "Mega not installed, installing..."
    wget https://mega.nz/linux/repo/xUbuntu_22.04/amd64/megasync-xUbuntu_22.04_amd64.deb 
    sudo apt install ./megasync-xUbuntu_22.04_amd64.deb
    rm megasync-xUbuntu_22.04_amd64.deb
fi

if ! [ -x "$(command -v brave-browser)" ]; then
    print_i "Brave not installed, installing..."
    sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list
    sudo apt update
    sudo apt install brave-browser
fi

if ! [ -x "$(command -v appimageLauncher)" ]; then
    print_i "AppimageLauncher not installed, installing..."
    sudo add-apt-repository ppa:appimagelauncher-team/stable
    sudo apt-get update
    apt_install appimagelauncher
fi

if ! [ -x "$(command -v docker)" ]; then
    print_i "Docker not installed, installing..."
    # Add Docker's official GPG key:
    sudo apt-get install ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    # Add the repository to Apt sources:
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo $PACKAGE_MANAGER update

    sudo $PACKAGE_MANAGER install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    sudo groupadd docker
    sudo usermod -aG docker "$USER"
fi

if ! [ -d "$HOME/.platformio/" ]; then
    print_i "PlatformIO not installed, installing..."
    pip install -U platformio
fi

if ! flatpak list | grep -q discord; then
    print_i "Discord not installed, installing..."
    flatpak install flathub com.discordapp.Discord -y
fi

if ! flatpak list | grep -q spotify; then
    print_i "Spotify not installed, installing..."
    flatpak install flathub com.spotify.Client -y
fi

if ! flatpak list | grep -q obsidian; then
    print_i "Obsidian not installed, installing..."
    flatpak install flathub md.obsidian.Obsidian -y
fi

if ! [ -x "$(command -v zsh)" ]; then
    print_i "Zsh not installed, installing..."
    apt_install zsh
    chsh -s "$(which zsh)"
fi

if ! [ -d "$HOME/.oh-my-zsh/" ]; then
    print_i "Oh-My-Zsh not installed, installing..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/PedroS235/ohmyzsh/master/tools/install.sh)"
fi

if ! [ -d "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions/" ]; then
    print_i "zsh-autosuggestions not installed, installing..."
    git clone https://github.com/zsh-users/zsh-autosuggestions "$HOME"/.oh-my-zsh/custom/plugins/zsh-autosuggestions
fi

if ! [ -d "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/" ]; then
    print_i "zsh-syntax-highlighting not installed, installing..."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME"/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
fi

if ! [ -d "$SSH_DIR" ]; then
    print_i "1Password not installed, installing..."
    wget https://downloads.1password.com/linux/debian/amd64/stable/1password-latest.deb -P /tmp
    apt_install /tmp/1password-latest.deb
    echo "1Password installed. Setup your account first. Press enter to continue..."
    read
fi

if [ -d "$DOTFILES_DIR" ]; then
    print_i "Dotfiles already installed, updating..."
    cd "$DOTFILES_DIR" || exit 1
    git pull
else
    print_i "Cloning Dotfiles..."
    git clone --recurse-submodules git@github.com:PedroS235/.dotfiles.git "$DOTFILES_DIR"
    rm $HOME/.zshrc
    cd $DOTFILES_DIR
    rm $HOME/.zshrc
    stow --adopt .
fi

if grep -q "ctrl:swapcaps" "/etc/default/keyboard"; then
    print_i "Swapping Caps Lock and Ctrl..."
    sudo sed -i 's/XKBOPTIONS=""/XKBOPTIONS="ctrl:swapcaps"/g' /etc/default/keyboard
fi

print_i "Setup is complete!"
print_i "Add the shortcut for flameshot: \`flameshot gui\`"
